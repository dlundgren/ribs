{"name":"Ribs","tagline":"Rsync Incremental Backup System","body":"RIBS (Rsync Incremental Backup System) by Jason Rust <jrust@rustyparts.com>\r\nYou can find the latest version of this script over at:\r\nhttp://www.ribs-backup.org/\r\n\r\nDescription:\r\nRIBS is an incremental backup system written in PHP which utilizes some\r\ncommon *nix programs (specifically rsync, ssh and cp).  Incremental\r\nbackups mean frequent backups can be done (i.e. hourly) with only around\r\n2x the space of the full backup.  Using rsync means that RIBS can act as\r\nboth a backup script on a local machine, or as a script to backup\r\nseveral network hosts.  It is designed to be highly configurable and\r\nhighly informative to the system administrator.  There is a high amount\r\nof error checking, and logging/email capabilities.\r\n\r\nRequirements:\r\n* rsync - http://samba.anu.edu.au/rsync/\r\n* cp & rm - http://www.gnu.org/software/fileutils/fileutils.html\r\n* PHP - http://www.php.net/\r\n* basic PEAR libraries (as of version 1.1) - http://pear.php.net/\r\n* PEAR's Console_Getopt-1.0 package.  This comes with PEAR, \r\n  but many people have version 0.11 which won't work.  Get it at:\r\n  http://pear.php.net/package-info.php?pacid=67\r\n\r\nQuick Usage Explanation:\r\nFor those in a hurry or just wanting to test out the script, the below\r\ncommands should get you up and going:\r\n* Download the latest version of RIBS\r\n* tar -xzvf ribs-x.x.tar.gz\r\n* cd ribs-x.x\r\n* ./ribs.php example hourly\r\n\r\nAfter that the test example backup should be run using the test directory\r\nthat comes with RIBS.  From there you can customize the options and start\r\nrunning backups on real data.\r\n\r\nDetailed Usage Explanation:\r\nInstall rsync.  Set it up to run over ssh (you will need to install ssh\r\nkeys on the servers you will be backing up (man ssh-keygen).  If you set\r\nthis up right you should be able to ssh from the backup machine to the\r\nremote host as the backup user without it asking you for a password\r\nNext, go through the user settings of this script to set up the hosts\r\nyou want to backup and the different configuration options (such as\r\nemail and logging settings).  Last you need to set the script up to run\r\nin crontab for your different hosts.\r\n\r\nAn example crontab entry might look something like the following:\r\n0 0-23/3 * * * /usr/local/bin/ribs my_host hourly # run my_host every three hours\r\n59 1 * * * /usr/local/bin/ribs my_host,big_host daily # run these two hosts daily\r\n58 1 * * 0 /usr/local/bin/ribs small_host weekly # run small_host once a week\r\n57 1 1 * * /usr/local/bin/ribs ALL monthly # use the keyword ALL to run all hosts monthly\r\n\r\nNotice that we schedule the daily, weekly, and monthly to occur at a\r\ndifferent hour than the hourly ones.\r\n\r\nYou can run this script from the command line and may want to do so a\r\nfew times before installing it in crontab to make sure you have worked\r\nout the kinks.  Also it is important to schedule the cron jobs such that\r\nthey will not overlap with each other.  In other words, if the daily\r\nbackup runs at the same time as the hourly backup you will have\r\nproblems.  Generally, scheduling the backups 15 minutes apart will work.\r\n\r\nExclude Patterns:\r\nMuch of the following explanation of exclude patterns comes from the\r\nrsync man page.  The patterns can take several forms. The rules are:\r\n\r\n* If the  pattern  starts with a / then it is matched against the start of the\r\n  filename, otherwise it is matched against the end of the filename.  Thus\r\n  \"/foo\"  would  match  a file  called  \"foo\"  at the base of the tree.  On the\r\n  other hand, \"foo\" would match any file called \"foo\" anywhere in the tree\r\n  because the  algorithm  is  applied  recursively from top down; it behaves as\r\n  if each path component gets a turn at being the end of the file name.\r\n\r\n* If the pattern ends with a / then it will only match a directory, not a file,\r\n  link or device.\r\n\r\n* If the pattern contains a wildcard character from the set *?[ then expression\r\n  matching is applied using the shell filename matching rules. Otherwise a simple\r\n  string match  is used.\r\n\r\n* If the  pattern includes a double asterisk \"**\" then all wildcards in the\r\n  pattern will match slashes, otherwise they will stop at slashes.\r\n\r\n* If the pattern begins with a + then the file will be included.  However, the\r\n  include rule must come before the exclude rule in order to override it.\r\n\r\n* Examples:\r\n   'directories' => '/etc/rc.d'\r\n   'excludes' => '/init.d' // exclude the top level init.d directory in rd.d/\r\n   'excludes' => '*.sh' // exclude all shell files \r\n   'excludes' => '+foo.sh *.sh rc*.d/'  // exclude all shell files, except foo.sh, and all rcX.d directories\r\n\r\nBackup Types:\r\nThe default backup type is incremental using hard links.  This means\r\nthat every directory will look like a full backup, but it will only take\r\nthe space of the backup plus the changed files.  However, for backups \r\nwith lots of files (>1000) this can become slow.  Thus, the other option \r\nis to use set the 'use_hard_links' option to false for the backup\r\nconfiguration.  This will keep a full backup in the most recent\r\ndirectory, but only archive changed files in the other directories.\r\nSo, roughly the same amount of space will be used, but not every\r\ndirectory will look like a full backup, and it will be faster for\r\nbackups with lots of files. \r\n\r\nExtracting Incremental Backups From a hard linked backup:\r\nIf an hourly backup is done and you would like to extract all changed files\r\nfrom that backup the following command will achieve that:\r\nfind /backups/backup_name/hourly.0 -type f -links 1 | sed 's, ,\\\\,g' | xargs tar -czf /tmp/foo.tar.gz\r\n\r\nNote on ssh and port forwarding:\r\nIf port forwarding with ssh means nothing to you, then you can ignore below.\r\n\r\nWhen connecting to the same 'host' twice, but the second connection is to a port\r\nforward to another host (i.e. behind a firewall), StrictHostKeyChecking (in the\r\nssh config file on the host running ribs) will need to be disabled because the\r\nhost key of the first port will conflict with the host key of the second port.\r\n\r\nAn example: Machine A is x.x.x.x Machine B is y.y.y.y  Machine A has ssh\r\nrunning on port 22.  Machine B also has ssh listening on port 22, but Machine B\r\nis not accessible from the outside.  So a port forward is setup on Machine A to\r\nget traffic to Machine B (e.g x.x.x.x:999 -> y.y.y.y:22)\r\n\r\nCredits:\r\nThanks to Mike Rubel for his excellent paper and sample code...\r\nhttp://www.mikerubel.org/computers/rsync_snapshots/\r\nThanks to Greg Lawler (http://zinkwazi.com) for the first BASH version\r\nThanks to Shai (http://shaibn.com/) for maintaining ribs-backup.org\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}